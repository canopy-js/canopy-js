#!/bin/bash

CANOPY_LOCATION="${CANOPY_LOCATION:- $(npm root -g)}"

case $1 in
build)
  if [ ! -d ./topics ]; then
    echo "There must be a 'topics' directory at the current path"
    exit 1
  fi

  rm -rf build
  mkdir build

  DEFAULT_TOPIC=`cat .canopy_default_topic`
  PATH_PREFIX=`cat .canopy_path_prefix`

  if [ -e index.html ]; then
    cp index.html build
  else
    cat << EOF > build/index.html
<html>
<head>
<meta charset="utf-8">
<link rel="icon" href="data:;base64,iVBORw0KGgo=">
</head>
<body>
<div id="_canopy" data-default-topic="$DEFAULT_TOPIC" data-path-prefix="$PATH_PREFIX"></div>
<script src="$PATH_PREFIX/canopy.js"></script>
</body>
<script>
  if (location.href[location.href.length - 1] === '/' && location.href !== location.origin + '/') {
    window.history.replaceState('Object', 'Title', location.href.slice(0, -1));
  }
</script>
</html>
EOF
  fi

  node $CANOPY_LOCATION/canopy-js/dist/parser.js . $2

  if [[ $2 != "--without-folders" ]]; then
    for D in `find "build" -mindepth 1 ! -name '*_data' -type d`; do
      cp build/index.html $D
    done

    cd build
    for CURRENT_TOPIC_PATH in `find "." -mindepth 1 ! -name '*data' -type d`; do
      for TOPIC_TO_ALIAS_PATH in `find "." -mindepth 1 ! -name '*data' -type d`; do
        if [ "$CANOPY_LOGGING" ]; then
          echo rm -f $CURRENT_TOPIC_PATH/$(basename $TOPIC_TO_ALIAS_PATH)
        fi
        rm -f $CURRENT_TOPIC_PATH/$(basename $TOPIC_TO_ALIAS_PATH)
        cd $CURRENT_TOPIC_PATH
        if [ "$CANOPY_LOGGING" ]; then
          echo ln -s ../$(basename $TOPIC_TO_ALIAS_PATH) $CURRENT_TOPIC_PATH/$(basename $TOPIC_TO_ALIAS_PATH)
        fi
        ln -s ../$(basename $TOPIC_TO_ALIAS_PATH) $(basename $TOPIC_TO_ALIAS_PATH)
        cd ..
      done
    done
    cd ..
  fi

  cp $CANOPY_LOCATION/canopy-js/dist/canopy.js build/canopy.js
  if [ "$CANOPY_LOGGING" ]; then
    cp $CANOPY_LOCATION/canopy-js/dist/canopy.js.map build/canopy.js.map
  fi
  if [ -d "assets" ]; then
    cp -r assets build/assets
  fi
;;
init)
  mkdir topics
  touch .gitignore
  echo "build/" >> .gitignore
  echo ".canopy_watch.pid" >> .gitignore
  echo ".canopy_bulk_temp" >> .gitignore
  echo "canopy_bulk_temp" >> .gitignore
  echo
  echo "Enter default topic name:"
  read DEFAULT_TOPIC
  echo $DEFAULT_TOPIC > .canopy_default_topic
  echo "${DEFAULT_TOPIC}: Text here." > $(echo $DEFAULT_TOPIC | node $CANOPY_LOCATION/canopy-js/script/snake_case.js)
  echo
  echo "If you will be hosting Canopy with a static assets server,"
  echo "and Canopy will be hosted from a subdirectory of the path,"
  echo "(eg, example.com/subdirectory/Topic, as opposed to example.com/Topic),"
  echo "type the prefix below (without leading or trailing slashes)."
  echo "Otherwise, just press return."
  read PATH_PREFIX
  echo $PATH_PREFIX > .canopy_path_prefix
  echo "All done. You might want to initialize a git repository with \`git init\`"
  ;;
watch)
  command -v fswatch >/dev/null 2>&1 || { echo >&2 "Canopy watch requires fswatch to be installed."; exit;}

  if [ "$2" == "stop" ]; then
    kill $(cat .canopy_watch.pid) > /dev/null 2>&1;
    rm .canopy_watch.pid
    exit 0;
  fi

  PIDFILE=.canopy_watch.pid
  if [ -f $PIDFILE ];
  then
    PID=$(cat $PIDFILE)
    if ps -p $PID > /dev/null 2>&1;
    then
      # Canopy watch is already running
      kill $PID
    fi
  fi

  if [ ! -d ./topics ]; then
    echo "There must be a topics directory at the current path"
    exit 1
  fi

  #######
  fswatch -0 -o topics | CANOPY_DEBUG=true xargs -0 -n1 -I{} canopy build > /dev/null 2>&1 &
  #######

  echo $(jobs -p | tail -1) > $PIDFILE
  if [ $? -ne 0 ];
  then
    echo "Could not create PID file"
    exit 1
  fi

  canopy build;;
serve)
  canopy build
  $(npm root -g)/canopy-js/node_modules/http-server/bin/http-server build -p ${2:-3000}
  ;;

bulk)
  node $CANOPY_LOCATION/canopy-js/script/bulk_edit.js "$@"
  ;;

?|usage)
echo "Usage:"
echo "  canopy init"
echo "  canopy build [--without-folders]"
echo "  canopy watch [stop]"
echo "  canopy serve [PORT]"
echo "  canopy bulk [--start|--stop] [PATHS]"
;;
*)
  echo Unknown command;;
esac

#!/usr/bin/env node

const { Command } = require('commander');
const init = require('./commands/init');
const build = require('./commands/build');
const watch = require('./commands/watch');
const serve = require('./commands/serve/serve');
const bulk = require('./commands/bulk/bulk');

const program = new Command();

program
  .name('canopy-js')
  .description('A library for creating explanation trees');

program.command('init')
  .description('Initialize a Canopy project')
  .action(() => {
  	init();
  });

program.command('build')
  .description('build the Canopy text files into JSON data')
  .option('-s, --symlinks', 'builds symlinked topic folders for static assets server', false)
  .option('-h, --hash-urls', 'build site for use with hangbang URLs', false)
  .option('-p, --project-path-prefix <prefix>', 'for hosting on a domain with a subpath eg example.com/sub/', '')
  .action((options) => {
  	build(options);
  });

program.command('watch')
  .description('watch a Canopy project and rebuild JSON assets on text change')
  .argument('[mode]', 'whether to start or stop Canopy watch', 'start')
  .option('-s, --symlinks', 'builds symlinked topic folders for static assets server', false) //build options
  .option('-h, --hashbang-urls', 'build site for use with hangbang URLs', false)
  .option('-p, --project-path-prefix <prefix>', 'for hosting on a domain with a subpath eg example.com/subpath/', '')
  .action((argument, options) => {
  	watch(argument, options);
  });

program.command('serve')
  .description('run a server for a Canopy project')
  .option('-p, --port <port>', 'specify a custom port', 8000)
  .option('-s, --static', 'run a static assets server instead of a node.js server', false)
  .action((options) => {
  	serve(options);
  });

program.command('bulk')
  .description('watch a Canopy project and rebuild JSON assets on text change')
  .option('--start', 'start a bulk mode session using canopy_bulk_file for manual editing')
  .option('--finish', 'import finished session from canopy_bulk_file')
  .option('-p, --pick', 'choose file paths with fuzzy selector')
  .option('-b, --blank', 'choose file paths with fuzzy selector')
  .option('-d, --directories', 'used in conjunction with --pick, allows the user to select directories of files')
  .option('-r, --recursive', 'used in conjunction with --pick, allows selection of recursive directory contents')
  .option('-c, --clear-backup', 'clear the backup file prior to bulk edit')
  .argument('[paths...]')
  .action((paths, options) => {
  	bulk(paths, options).catch((e) => console.error(e));
  });

program.parse();

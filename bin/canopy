#!/bin/bash

# We are assuming however you installed canopy, the binary on your bath is a symlink to this file
# and that the binary's directory's directory is the canopy repository
CANOPY_LOCATION="${CANOPY_LOCATION:-$(readlink -f $(which canopy) | xargs dirname | xargs dirname)}"

case $1 in
init)
  mkdir -p topics
  if [[ -f .canopy_config ]]; then echo ".canopy_config file already detected, delete and try again."; exit 1; fi

  touch .gitignore
  if [[ -z $(cat .gitignore | grep "build/") ]]; then echo "build/"; fi
  if [[ -z $(cat .gitignore | grep ".canopy_watch.pid") ]]; then echo ".canopy_watch.pid"; fi
  if [[ -z $(cat .gitignore | grep ".canopy_watch_dev.pid") ]]; then echo ".canopy_watch_dev.pid"; fi
  if [[ -z $(cat .gitignore | grep ".canopy_bulk_temp") ]]; then echo ".canopy_bulk_temp"; fi
  if [[ -z $(cat .gitignore | grep "canopy_bulk_temp") ]]; then echo "canopy_bulk_temp"; fi

  touch .canopy_config
  if [[ -z $(cat .canopy_config | grep "DEFAULT_TOPIC") ]]; then
    echo "Enter default topic name:"
    read DEFAULT_TOPIC
    echo "DEFAULT_TOPIC=$DEFAULT_TOPIC" >> .canopy_config
    printf "${DEFAULT_TOPIC}: Text here.\n" > $(echo $DEFAULT_TOPIC | node $CANOPY_LOCATION/script/snake_case.js)
    echo
  fi

  if [[ -z $(cat .canopy_config | grep "PROJECT_PATH_PREFIX") ]]; then
    echo "If you will be hosting Canopy with a static assets server,"
    echo "and Canopy will be hosted from a subdirectory of the path,"
    echo "(eg, example.com/subdirectory/Topic, as opposed to example.com/Topic),"
    echo "type the prefix (eg, subdirectory) below, without leading or trailing slashes."
    echo "Otherwise, (or if you're not sure,) just press return."
    read PROJECT_PATH_PREFIX
    echo "PROJECT_PATH_PREFIX=$PROJECT_PATH_PREFIX" >> .canopy_config
    echo
  fi

  if [[ -z $(cat .canopy_config | grep "HASHBANGS") ]]; then
    echo "Will you be hosting your project with hash-bang URLs?"
    echo "(If yes, your URLs will look like http://example.com/#!/Topic)"
    echo "The reason to prefer hash-bangs is if you will be using a static assets server"
    echo "that does not support symlinks, like Github Pages."
    read -p "(y/n) " yn
    case $yn in
        [Yy]* ) HASHBANGS="true";;
        [Nn]* ) HASHBANGS="";;
        * ) echo "Please answer yes or no.";;
    esac
    echo "HASHBANGS=$HASHBANGS" >> .canopy_config
  fi
  echo "All done. You might want to initialize a git repository with \`git init\`";;
build)
  if [ ! -d ./topics ]; then
    echo "There must be a 'topics' directory at the current path"
    exit 1
  fi

  rm -rf build
  mkdir build

  DEFAULT_TOPIC=`cat .canopy_config | grep DEFAULT_TOPIC= | cut -d'=' -f 2`
  PROJECT_PATH_PREFIX=`cat .canopy_config | grep PROJECT_PATH_PREFIX= | cut -d'=' -f 2`
  HASHBANGS=`cat .canopy_config | grep HASHBANGS= | cut -d'=' -f 2`

  if [ -e index.html ]; then
    cp index.html build
  else
    cat << EOF > build/index.html
<html>
<head>
<meta charset="utf-8">
<link rel="icon" href="data:;base64,iVBORw0KGgo=">
</head>
<body>
<div
  id="_canopy"
  data-default-topic="$DEFAULT_TOPIC"
  data-project-path-prefix="$PROJECT_PATH_PREFIX"
  data-hashbangs="$HASHBANGS">
</div>
<script src="$PROJECT_PATH_PREFIX/canopy.js"></script>
</body>
<script>
  if (location.href[location.href.length - 1] === '/' && location.href !== location.origin + '/') {
    window.history.replaceState('Object', 'Title', location.href.slice(0, -1));
  }
</script>
</html>
EOF
  fi

  node $CANOPY_LOCATION/dist/parser.js . $2

  if [[ $2 = "--for-static-assets" ]]; then
    cd build
    for CURRENT_TOPIC_PATH in `find "." -mindepth 1 ! -name '*data' -type d`; do
      for TOPIC_TO_ALIAS_PATH in `find "." -mindepth 1 ! -name '*data' -type d`; do
        if [ "$CANOPY_LOGGING" ]; then
          echo rm -f $CURRENT_TOPIC_PATH/$(basename $TOPIC_TO_ALIAS_PATH)
        fi
        rm -f $CURRENT_TOPIC_PATH/$(basename $TOPIC_TO_ALIAS_PATH)
        cd $CURRENT_TOPIC_PATH
        if [ "$CANOPY_LOGGING" ]; then
          echo ln -s ../$(basename $TOPIC_TO_ALIAS_PATH) $CURRENT_TOPIC_PATH/$(basename $TOPIC_TO_ALIAS_PATH)
        fi
        ln -s ../$(basename $TOPIC_TO_ALIAS_PATH) $(basename $TOPIC_TO_ALIAS_PATH)
        cd ..
      done
    done
    cd ..
  fi

  cp $CANOPY_LOCATION/dist/canopy.js build/canopy.js
  if [ -f "$CANOPY_LOCATION/dist/canopy.js.map" ]; then
    cp $CANOPY_LOCATION/dist/canopy.js.map build/canopy.js.map
  fi
  if [ -d "assets" ]; then
    cp -r assets build/assets
  fi;;
watch)
  command -v fswatch >/dev/null 2>&1 || { echo >&2 "Canopy watch requires fswatch to be installed."; exit;}

  if [ "$2" == "stop" ]; then
    kill $(cat .canopy_watch.pid) > /dev/null 2>&1;
    rm .canopy_watch.pid
    exit 0;
  fi

  PIDFILE=.canopy_watch.pid
  if [ -f $PIDFILE ];
  then
    PID=$(cat $PIDFILE)
    if ps -p $PID > /dev/null 2>&1;
    then
      # Canopy watch is already running
      kill $PID
    fi
  fi

  if [ ! -d ./topics ]; then
    echo "There must be a topics directory at the current path"
    exit 1
  fi

  #######
  fswatch -0 -o topics | CANOPY_DEBUG=true xargs -0 -n1 -I{} canopy build > /dev/null 2>&1 &
  #######

  echo $(jobs -p | tail -1) > $PIDFILE
  if [ $? -ne 0 ];
  then
    echo "Could not create PID file"
    exit 1
  fi

  canopy build $2;;
watch-dev)
  # Watch-dev assumes $CANOPY_LOCATION is pointing to your local development repo.
  #
  # When a change to your code triggers a rebuild of the assets in canopy-js/dist,
  #   watch-dev rebuilds the current canopy project to include the new version of canopy-js
  #
  command -v fswatch >/dev/null 2>&1 || { echo >&2 "Canopy watch requires fswatch to be installed."; exit;}

  if [ "$2" == "stop" ]; then
    kill $(cat .canopy_dev_watch.pid) > /dev/null 2>&1;
    rm .canopy_watch.pid
    exit 0;
  fi

  PIDFILE=.canopy_watch_dev.pid
  if [ -f $PIDFILE ];
  then
    PID=$(cat $PIDFILE)
    if ps -p $PID > /dev/null 2>&1;
    then
      # Canopy watch is already running
      kill $PID
    fi
  fi

  if [ ! -d ./topics ]; then
    echo "There must be a topics directory at the current path"
    exit 1
  fi

  #######
  fswatch -0 -o $CANOPY_LOCATION/dist | CANOPY_DEBUG=true xargs -0 -n1 -I{} canopy build > /dev/null 2>&1 &
  #######

  echo $(jobs -p | tail -1) > $PIDFILE
  if [ $? -ne 0 ];
  then
    echo "Could not create PID file"
    exit 1
  fi

  canopy build $2;;
serve)
  canopy build
  if [ $? -ne 0 ];
  then
    exit 1
  fi
  echo "Serving on port ${2:-3000}"
  node $CANOPY_LOCATION/script/server.js ${2:-3000}
  ;;

bulk)
  node $CANOPY_LOCATION/script/bulk_edit.js "$@"
  ;;

*)
echo "Usage:"
echo "  canopy init"
echo "  canopy build [--for-static-assets]"
echo "  canopy watch [stop]"
echo "  canopy serve [PORT]"
echo "  canopy bulk [--start|--stop] [PATHS]"
;;

esac

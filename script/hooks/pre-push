#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

PACKAGE_JSON_VERSION=$(cat package.json | grep version | cut -d "\"" -f 4)
CURRENT_TAG=$(git describe --exact-match --tags 2> /dev/null)


if [[ -n "$CURRENT_TAG" && ! -z $(git status -s) ]]
then
	echo
	echo "!!! ERROR: cannot publish with uncomitted changes (maybe you forgot to commit the package.json tag increment)"
	echo
	exit 1
fi

if [[ -n "$CURRENT_TAG" ]];
then
	if [ "$PACKAGE_JSON_VERSION" = "$CURRENT_TAG" ]; then
	    exit 0
	else
			echo
	    echo "!!! ERROR: Git tag and package.json version number do not match"
	    echo
	    exit 1
	fi
fi

if grep -q -r 'test.only' cli client; then
	echo
	echo "!!! ERROR: \"test.only\" found in test file:";
	echo
	grep -r 'test.only' cli client
	echo
fi

#!/bin/bash

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
    echo "There are uncommitted changes. Please commit or stash them before running this script."
    exit 1
fi

# Extract current version
current_version=$(jq -r '.version' package.json)
echo "Current version: $current_version"

# Check if a Git tag exists for the current version
if git rev-parse -q --verify "refs/tags/$current_version" >/dev/null; then
    echo "Git tag for version $current_version exists. Proceeding to increment patch version."

    # Break the version number into an array (major, minor, patch)
    IFS='.' read -ra ADDR <<< "$current_version"
    major=${ADDR[0]}
    minor=${ADDR[1]}
    patch=${ADDR[2]}

    # Remove leading zeros if present
    patch=$(echo $patch | sed 's/^0*//')

    # Increment the patch version
    ((patch++))

    # Ensure patch has a leading zero if it is less than 10
    if [ $patch -lt 10 ]; then
        patch="0$patch"
    fi

    # New version
    new_version="$major.$minor.$patch"
    echo "New version: $new_version"

    # Update package.json with the new version
    jq --arg new_version "$new_version" '.version=$new_version' package.json > temp.json && mv temp.json package.json

    # Amend the last commit and add the new version tag
    git add package.json
    git commit --amend --no-edit
    git tag -a "$new_version" -m "$new_version"
    echo "Updated to version $new_version and tagged commit."

else
    echo "No existing Git tag found for version $current_version. Tag may have been deleted."
    echo "Creating a new tag for the current version."

    # Create a new tag for the existing version
    git tag -a "$current_version" -m "Restoring deleted tag for version $current_version"
    echo "Restored tag for version $current_version."
fi
